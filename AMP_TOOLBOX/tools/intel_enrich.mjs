#!/usr/bin/env node
// Customer Intelligence Enrichment Tool
// Usage: node AMP_TOOLBOX/tools/intel_enrich.mjs "Account Name" [outputPath]

import fs from 'fs/promises';
import path from 'path';

const account = process.argv[2];
if (!account) {
  console.error('Usage: intel_enrich <accountName> [outputPath]');
  process.exit(2);
}
const outArg = process.argv[3];
const outDir = outArg ? path.dirname(outArg) : path.join(process.cwd(), 'docs', 'generated', 'research');
const outFile = outArg || path.join(outDir, `${account.replace(/[^a-z0-9_-]/gi, '-').toLowerCase()}.md`);

const UA = process.env.USER_AGENT || 'amp-se-demos/1.0 (contact@example.com)';
const GH_TOKEN = process.env.GITHUB_TOKEN || '';
const SF_BASE = process.env.SF_INSTANCE_URL || '';
const SF_TOKEN = process.env.SF_ACCESS_TOKEN || '';

function h1(s){return `\n# ${s}\n`}
function h2(s){return `\n## ${s}\n`}
function code(s){return '````\n'+s+'\n````\n'}

async function ensureDir(p){ await fs.mkdir(p, {recursive:true}); }

async function fetchJSON(url, opts={}){
  const headers = Object.assign({ 'User-Agent': UA, 'Accept': 'application/json' }, opts.headers||{});
  const res = await fetch(url, { ...opts, headers });
  if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText} for ${url}`);
  const ct = res.headers.get('content-type') || '';
  return ct.includes('application/json') ? res.json() : res.text();
}

async function querySalesforce(name){
  if (!SF_BASE || !SF_TOKEN) return {enabled:false, content:'Salesforce not configured (set SF_INSTANCE_URL and SF_ACCESS_TOKEN).'};
  try {
    const api = `${SF_BASE}/services/data/v57.0/query`;
    const q1 = new URL(api);
    q1.searchParams.set('q', `SELECT Id, Name, Website, Industry, Description FROM Account WHERE Name LIKE '%${name.replace(/'/g, "''")}%' LIMIT 3`);
    const acc = await fetchJSON(q1.toString(), { headers: { Authorization: `Bearer ${SF_TOKEN}` } });
    let md = h2('Salesforce Accounts');
    if (acc.totalSize === 0) { md += '\nNo matching accounts found.\n'; return {enabled:true, content:md}; }
    for (const a of acc.records) {
      md += `\n- ${a.Name} (${a.Industry||'N/A'}) ${a.Website?`- ${a.Website}`:''}`;
      const q2 = new URL(api);
      q2.searchParams.set('q', `SELECT Name, StageName, Amount, CloseDate FROM Opportunity WHERE AccountId = '${a.Id}' ORDER BY CloseDate DESC LIMIT 5`);
      try {
        const opp = await fetchJSON(q2.toString(), { headers: { Authorization: `Bearer ${SF_TOKEN}` } });
        if (opp.totalSize>0){
          md += '\n  - Recent Opportunities:';
          for (const o of opp.records){
            md += `\n    - ${o.Name} • ${o.StageName} • ${o.Amount||'N/A'} • ${o.CloseDate}`;
          }
        }
      } catch {}
    }
    return {enabled:true, content:md};
  } catch (e) {
    return {enabled:true, content:`Salesforce query failed: ${e.message}`};
  }
}

async function searchGitHub(name){
  try {
    const headers = GH_TOKEN ? { Authorization: `Bearer ${GH_TOKEN}` } : {};
    const users = await fetchJSON(`https://api.github.com/search/users?q=${encodeURIComponent(name)}+type:org&per_page=3`, { headers });
    let md = h2('GitHub Orgs & Repos');
    if (!users.items || users.items.length===0) { md += '\nNo orgs found via search.'; return md; }
    for (const u of users.items){
      md += `\n- Org: ${u.login} (${u.html_url})`;
      const repos = await fetchJSON(`https://api.github.com/orgs/${u.login}/repos?per_page=5&sort=updated`, { headers });
      for (const r of repos){
        md += `\n  - ${r.name}: ${r.html_url} • ${r.language||'n/a'} • ⭐ ${r.stargazers_count}`;
      }
    }
    return md;
  } catch (e) {
    return `GitHub search failed: ${e.message}`;
  }
}

async function secLinks(name){
  const url = `https://www.sec.gov/cgi-bin/browse-edgar?company=${encodeURIComponent(name)}&owner=exclude&action=getcompany&count=10`;
  return h2('SEC Filings (Public Companies)') + `\n- Company filings search: ${url}\n`;
}

async function main(){
  let md = `<!-- Generated by intel_enrich on ${new Date().toISOString()} -->\n`;
  md += h1(`${account} – Customer Intelligence`);
  md += h2('Summary') + `- Account: ${account}\n- Generated: ${new Date().toLocaleString()}\n`;
  const sf = await querySalesforce(account);
  md += h1('Signals');
  if (sf.enabled) md += sf.content; else md += h2('Salesforce') + '\nNot configured.';
  md += await searchGitHub(account);
  md += await secLinks(account);
  md += h1('Demo Tailoring Suggestions') + `\n- Map pain points to recent opp stages and repo activity\n- Align talk track to industry (${sf.enabled ? 'Salesforce Industry if available' : 'inferred from repos'})\n- Propose proof metrics (coverage_delta, time_saved) tied to their stack\n`;
  await ensureDir(outDir);
  await fs.writeFile(outFile, md, 'utf8');
  console.log(`Wrote ${outFile}`);
}

main().catch(e=>{ console.error(e); process.exit(1); });
